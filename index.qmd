---
format:
  html:
    page-layout: full
    theme: cosmo
    fontsize: 0.7em
    css: styles.css
    # max-width: 2000px
    # grid:
    #     body-width: 3000px
    #     margin-width: 0px
    #     sidebar-width: 0px
---

# An Overview Table of DL-based Survival Methods

## Disclaimer

<div class="disclaimer-text">

The table on this GitHub Pages site has been created as part of the review paper [Deep Learning For Survival Analysis: A Review](https://link.springer.com/article/10.1007/s10462-023-10681-3) using the **R** package **reactable** (Lin, 2023). It is licensed under CC BY.

This table is not guaranteed to be complete and will be extended continuously. To do so, we welcome pull requests by adding to `data/raw.csv` in the [source repository](https://github.com/survival-org/DL4Survival) of this site. New methods should comply with the inclusion and exclusion criteria used in the review paper and contain information for all columns in the table. We will then cross-check and merge new pull requests.

</div>

## Acronyms, abbreviations, and explanations of the table columns

<div class="disclaimer-text">

All of the columns of the table, as well as the corresponding classifications, are described in detail in the review paper.

- **title**: Title of the article introducing the method.
- **model name**: Official method name if provided in the respective paper; otherwise, the first three letters of the first author's last name followed by the year of publication.
- **model class**: See review paper for classification.
- **parametrization**: See review paper for classification.
- **architecture**: Which neural network architecture does the method employ?
- **left-truncation**: Can the method handle left-truncated survival times?
- **interval-censoring**: Can the method handle interval-censored survival times?
- **CR**: Can the method handle competing risks?
- **MSM**: Can the method handle multi-state modeling?
- **RE**: Can the method handle recurrent events?
- **TVF**: Can the method handle time-varying features?
- **TVE**: Can the method estimate time-varying effects?
- **high dim**: Is the method specifically designed for high-dimensional (e.g., omics) features?
- **multimodality**: Can the method handle unstructured features or multiple feature modalities (e.g., images)?
- **interpretability**: Are the results produced by the methods (in particular, the feature effects) interpretable?
    - BP = backpropagation
    - CIC = cumulative incidence curve
    - FI = feature importance
    - classical = classical statistical interpretability of tabular data
- **code**: Is the code for the method and experiments publicly available and, if so, where? (Hyperlink to the main repository; further implementations of the method, if available, are shown by expanding the respective row.)
- **authors**: Authors of the article introducing the method. (*hidden*)
- **year**: Year of publication of the article introducing the method. (*hidden*)
- **paper**: URL of the publication of the article (hyperlink in the **title** column). (*hidden*)
- **multiple losses**: Does the method use more than one loss for training? (*hidden*)
- **datasets**: Which accessible (i.e., public or registered access) datasets is the method evaluated on in the respective paper? (*hidden*)
- **min dataset size**: Size of the smallest dataset used to evaluate the method in the respective paper. (*hidden*)
- **simulation**: Is the method additionally evaluated on synthetic data? (*hidden*)
- **comments**: Further comments regarding the method (also shown if expanding the row). (*hidden*)

</div>

## Table

```{r setup, include=FALSE}
set.seed(1102)
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::current_input()
# options(reactable.static = TRUE)
```

```{r, include=FALSE}
library(dplyr)
library(stringr)
suppressWarnings(library(reactable))
# suppressWarnings(library(reactablefmtr))
library(htmltools)
# library(googlesheets4)

# link <- "https://docs.google.com/spreadsheets/d/11CNiOzZGwKie1G2miQY6TVMVMfI-COmiF4x2ylqetzA/edit#gid=0"
# raw <- googlesheets4::read_sheet(link)
# write.csv(raw, "../data/raw.csv")
```

```{r, include=FALSE}
raw <- read.csv(
  "data/raw.csv",
  check.names=FALSE,
  fileEncoding="UTF-8")
drop_cols <- c(
    "multi-task learning",
    "NN architecture",
    "code availability",
    "active learning",
    "semi-supervised learning",
    "PASS",
    "scribbles"
)
hide_cols <- c('authors', 'year', 'paper', 'multiple losses', 'datasets', 'min dataset size', 'simulation', 'comments')

data = raw %>%
    mutate(
        `model class` = case_when(
            # str_detect(raw[["model class"]], "Cox") ~ "Cox-based",
            # str_detect(raw[["model class"]], "discrete") ~ "discrete-time",
            # str_detect(raw[["model class"]], "PEM") ~ "PEM-based",
            `model class` == "Cox-based" ~ "Cox-based",
            `model class` == "discrete-time" ~ "discrete-time",
            `model class` == "PEM-based" ~ "PEM-based",
            str_detect(raw[["model class"]], "parametric") ~ "parametric",
            `model class` == "ODE-based" ~ "ODE-based",
            `model class` == "ranking-based" ~ "ranking-based",
            TRUE ~ "other"
        ) %>% factor(levels = c("Cox-based", "discrete-time", "parametric", "PEM-based", "other")),
        # architecture = case_when(
        #     str_detect(raw[["NN architecture"]], "CNN") ~ "CNN",
        #     str_detect(raw[["NN architecture"]], "RNN") ~ "RNN",
        #     str_detect(raw[["NN architecture"]], "AE") ~ "AE/VAE",
        #     str_detect(raw[["NN architecture"]], "transformer") ~ "transformer",
        #     str_detect(raw[["NN architecture"]], "flexible") ~ "flexible",
        #     str_detect(raw[["NN architecture"]], "ODE") ~ "nODE",
        #     str_detect(raw[["NN architecture"]], "CapsNet") ~ "CapsNet",
        #     str_detect(raw[["NN architecture"]], "framework") ~ "framework",
        #     str_detect(raw[["NN architecture"]], "GAN") ~ "GAN",
        #     str_detect(raw[["NN architecture"]], "normalizing flows") ~ "normalizing flows",
        #     str_detect(raw[["NN architecture"]], "PointNet") ~ "PointNet",
        #     raw[["NN architecture"]] == "FFNN" ~ "only FFNN",
        #     str_detect(raw[["NN architecture"]], "FFNN") ~ "FFNN+",
        #     TRUE ~ "other"
        # ) %>% factor(levels = c("only FFNN", "CNN", "RNN", "FFNN+", "AE/VAE", "transformer", "flexible", "nODE", "CapsNet", "framework", "GAN", "normalizing flows", "PointNet", "other"))
    ) %>%
    filter(PASS == "PASS") %>%
    select(-one_of(drop_cols)) %>%
    relocate(architecture, .before = 8) %>%
    rename(
        # "left-trun-cation" = "left-truncation",
        # "paramet-rization" = "parametrization",
        # "archi-tecture" = "architecture",
        "high dim" = "high dimensionality",
        "multi-modality" = "multimodality",
        "interpret-ability" = "interpretability"
    ) %>%
    select(-one_of(hide_cols), one_of(hide_cols))

# papers <- data %>% pull(paper)
# comments <- data %>% pull(comments)

# data <- data %>% select(-c(paper, comments))
```

```{r, echo=FALSE}
htmltools::browsable(
    tagList(
        tags$button(
            "Show/hide more columns",
            onclick = paste0(
                "Reactable.setHiddenColumns('table', prevColumns => { return prevColumns.length === 0 ? [",
                paste0("'", paste(hide_cols, collapse = "', '"), "'"),
                "] : [] })"
            )
        ),
        tags$button(
            tagList(fontawesome::fa("download"), "Download as CSV"),
            onclick = "Reactable.downloadDataCSV('table', 'table.csv', {sep: ';'})"
        ),
        reactable(
            data,
            elementId = "table",
            rownames = FALSE,
            wrap = TRUE,
            sortable = TRUE,
            filterable = TRUE,
            searchable = TRUE,
            # resizable = TRUE,
            bordered = TRUE,
            borderless = FALSE,
            compact = TRUE,
            striped = TRUE,
            highlight = TRUE,
            height = 700, # required for sticky column names
            fullWidth = TRUE,
            width = "auto",
            defaultSorted = c("model name"),
            showSortIcon = TRUE,
            showSortable = FALSE,
            # minRows = 10,
            # pagination = FALSE,
            showPageSizeOptions = TRUE,
            pageSizeOptions = c(5, 7, 10, nrow(data)),
            defaultPageSize = 7,
            # selection = "multiple",
            columns = list(
                title = colDef(
                    cell = function(value, index) {
                        url <- data[index, "paper"]
                        # url <- papers[index]
                        k <- 70
                        label <- value
                        if(nchar(label) > k) {
                            label <- stringr::str_trunc(label, k-3, ellipsis = "...")
                        }
                        htmltools::tags$a(href = url, target = "_blank", label)
                    },
                    width = 100,
                    show = TRUE,
                    sticky = "left",
                    style = list(borderRight = "1px solid #eee")),
                # authors = colDef(show = FALSE),
                # year = colDef(width = 49, show = FALSE),
                `model name` = colDef(
                    details = function(index) {
                        if(data[index, "comments"] != "") {
                            paste0(data[index, "comments"])
                        }
                    },
                    width = 90),
                `model class` = colDef(width = 80),
                parametrization = colDef(width = 100, show = TRUE),
                # `multi-task learning` = colDef(show = FALSE),
                `multiple losses` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f Yes" else value},
                    width = 60,
                    show = FALSE
                ),
                architecture = colDef(
                    # details = function(index) {
                    #     if(data[index, "model name"] %in% c("DeepHit", "DSM")) {
                    #         paste("RNN used by extension")
                    #     }
                    # },
                    width = 80),
                `left-truncation` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 69
                ),
                `interval-censoring` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 65
                ),
                CR = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                MSM = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                RE = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                TVF = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                TVE = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                `high dim` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 49
                ),
                `multi-modality` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 61
                ),
                `interpret-ability` = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else if(value == "yes") "\u2714\ufe0f yes" else value},
                    width = 80
                ),
                code = colDef(
                    # render as link
                    cell = function(value) {
                        if(value == "no"){
                            "\u274c not accessible"
                        } else {
                            url <- strsplit(value, ", ")[[1]][1]
                            label <- sub("https://", "", url)
                            k <- 100
                            if(nchar(label) > k) {
                                label <- stringr::str_trunc(label, k-3, ellipsis = "...")
                            }
                            # if(startsWith(link, "github")){
                            #     label <- "GitHub repo"
                            # } else if(grepl("github\\.io", link)){
                            #     label <- "GitHub Pages site"
                            # } else {
                            #     label <- link
                            # }
                            htmltools::tags$a(href = url, target = "_blank", label)
                        }
                    },
                    details = function(index) {
                        urls <- strsplit(data[index, "code"], ", ")[[1]]
                        if(length(urls) == 2) {
                            htmltools::div(
                                "further implementations of ",
                                data[index, "model name"],
                                ": ",
                                htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                            )
                        } else if(length(urls) == 3) {
                            htmltools::div(
                                "further implementations of ",
                                data[index, "model name"],
                                ": ",
                                htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                                ", ",
                                htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                            )
                        } else if(length(urls) == 4) {
                            htmltools::div(
                                "further implementations of ",
                                data[index, "model name"],
                                ": ",
                                htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                                ", ",
                                htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                                ", ",
                                htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                            )
                        } else if(length(urls) == 5) {
                            htmltools::div(
                                "further implementations of ",
                                data[index, "model name"],
                                ": ",
                                htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                                ", ",
                                htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                                ", ",
                                htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                                ", ",
                                htmltools::tags$a(href = urls[5], target = "_blank", urls[5]),
                            )
                        } else if(length(urls) == 6) {
                            htmltools::div(
                                "further implementations of ",
                                data[index, "model name"],
                                ": ",
                                htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                                ", ",
                                htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                                ", ",
                                htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                                ", ",
                                htmltools::tags$a(href = urls[5], target = "_blank", urls[5]),
                                ", ",
                                htmltools::tags$a(href = urls[6], target = "_blank", urls[6]),
                            )
                        } else if(length(urls) > 6) {
                            htmltools::div(
                                "further implementations of ",
                                data[index, "model name"],
                                ": ",
                                htmltools::tags$a(href = urls[2], target = "_blank", urls[2]),
                                ", ",
                                htmltools::tags$a(href = urls[3], target = "_blank", urls[3]),
                                ", ",
                                htmltools::tags$a(href = urls[4], target = "_blank", urls[4]),
                                ", ",
                                htmltools::tags$a(href = urls[5], target = "_blank", urls[5]),
                                ", ",
                                htmltools::tags$a(href = urls[6], target = "_blank", urls[6]),
                                "... (see raw data for further implementations)"
                            )
                        }
                    },
                    # style = cell_style(
                    #     data,
                    #     border_width = "thick",
                    #     border_color = "black",
                    #     border_style = "border-inline"
                    # ),
                    width = 80
                ),
                authors = colDef(
                    # cell = function(value) {
                    #     htmltools::div(value, style = "padding-left: 10px; border-left: 2px solid black;")
                    # },
                    show = FALSE
                ),
                year = colDef(show = FALSE),
                paper = colDef(show = FALSE),
                datasets = colDef(show = FALSE),
                `min dataset size` = colDef(show = FALSE),
                simulation = colDef(
                    # render as an X mark or check mark
                    cell = function(value){if(value == "no") "\u274c no" else "\u2714\ufe0f yes"},
                    show = FALSE
                ),
                comments = colDef(show = FALSE)
            )
        )
    )
)
```